{
    description: "Single Test",
    program: '''                
        @include("assert.h");
       // @include("<thread.h>");
        
        @foreign func assert(e:bool):void;
        
        %definitions%
        
        func main(len:i32, args:char**):i32 {
            %test%
        }
    '''
    tests: [                
        /*{
            name: "Typecast", 
            definitions: '''
                typedef func<T>(T):T as Test;
                
                func test<T>(t: Test<T>, a: T) : T {
                    if(!t) {
                        return a + 1
                    }
                    return t<T>(a)
                }        
                
                func z(a: i32) : i32 {
                    return a
                }
                
            ''',                       
            code: '''
                assert(test<i32>(&z, 4) == 4)
            ''',
        },*/
        {
            name: "Generics struct with union",
            definitions: '''                
                struct Person<T> {
                    union X<T> {
                        v: T
                    }
                }
                            
            ''',            
            code: '''
                var x = Person<i32> { .X: X<i32>{4} }               
                assert(x.X.v == 4)
                  
            '''
        },    
    ]
}