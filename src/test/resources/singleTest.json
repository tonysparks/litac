{
    description: "Single Test",
    disabled: false,
    program: '''                
        @include("assert.h");
        @foreign func assert(e:bool):void;
        
        %definitions%
        
        func main(len:i32, args:char**):i32 {
            %test%
        }
    '''
    tests: [                           
        /*
        { 
            name: "Str assigned to array",
            definitions: '''
                @include("<string.h>");
                @foreign func strcmp(a:char const*, b:char const*) : i32;
                                                
                struct Test {
                    name: [32]char
                }
            ''',                       
            code: '''         
                var t = Test{
                    .name = "Brett"
                }                 
                           
                assert(strcmp(t.name, "Brett") == 0)
            ''',                      
        },
        { 
            name: "array assigned to str",
            definitions: '''
                @include("<string.h>");
                @foreign func strcmp(a:char const*, b:char const*) : i32;
                                                
                struct Test {
                    name: char*
                    x: [32]char                    
                }
                
                struct X {
                    x: [32]char
                }
            ''',                       
            code: '''        
                var m : [32]char = "Brett"
                var x = X{m}  
                var t = Test{
                    .name = m,
                    .x = x.x
                    
                }                 
                           
                assert(strcmp(t.name, "Brett") == 0)
            ''',                      
        },
        { 
            name: "Const char index to char",
            definitions: '''
                @include("<string.h>");
                @foreign func strcmp(a:char const*, b:char const*) : i32;
                                                
                struct Test {
                    name: char const*
                                   
                }                
            ''',                       
            code: '''        
                var t = Test{"Brett"}                
                var x = *t.name                 
                           
                assert(x == 'B')
            ''',                      
        },
        */
        /*
        { 
            name: "Anon Union",
            definitions: '''
                @include("<string.h>");
                @foreign func strcmp(a:char const*, b:char const*) : i32;
                         
                struct X {
                    a: i32
                }
                
                func (x: X*) method() : i32 {
                    return x.a
                }
                                                
                struct Test {
                    union {
                        w: X*
                        y: X*
                    }                                   
                }                
            ''',                       
            code: '''        
                var x = X{4}
                var t = Test {.w = &x}
                var w = t.w
                assert(w.method() == 4)
            ''',                      
        },*/
        {
            name: "UsingStructDeep",
            definitions: '''
                struct X {
                    x:f32
                }
                
                struct Vec {
                    e: using X
                    y: f32
                }
                struct Entity {
                    type: i32
                    pos: using Vec
                }
            ''',                       
            code: '''   
                var e = Entity{.pos: Vec{ .e: X{1.0f} ,2.0f}, .type: 1};
                assert(e.x == 1.0f);
                assert(e.y == 2.0f);
                
                e.x = 3.0f;
                e.y = 4.0f;
                
                assert(e.x == 3.0f);
                assert(e.y == 4.0f);
            ''',            
        },
    ]
}