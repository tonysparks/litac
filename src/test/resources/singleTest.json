{
    description: "Single Test",
    disabled: false,
    debug: true,
    includeTypeInfos: true,
    program: '''                
        @include("assert.h");
        @foreign func assert(e:bool):void;
        
        %definitions%
        
        func main(len:i32, args:char**):i32 {
            %test%
        }
    '''
    tests: [ 
	    /*{ 
            name: "FuncPtr Cast",
            definitions: '''         
                typedef func() : i32 as Func;
                
                func test() : i32 {
                    return 4
                }
                
                func f(fn: Func) : i32 {
                    return fn()
                }
            ''',                       
            code: '''  
                 assert(f(test as (Func)) == 4)
            ''',             
        },
        { 
            name: "Address of Array Element",
            definitions: '''
                const array = [3]i32 {
                    1, 2, 3
                }
            ''',                       
            code: '''         
                var a = &array[0]
                assert(a != 1 as (void*))
            ''',                      
        },*/
        /*
        { 
            name: "Array Init from Typedef",
            definitions: '''
                typedef [3]f32 as Vec3;
                
                const array = Vec3 {
                    1.0f, 2.0f, 3.0f
                }
            ''',                       
            code: '''         
                var a = &array[0]
                assert(a != 1 as (void*))
                assert(array[0] == 1)
                assert(array[1] == 2)
                assert(array[2] == 3)
            ''',                      
        },*/
        
        // TODO!!! 
        /*{ 
            name: "Array Init from Typedef with designator",
            definitions: '''
                typedef [3]f32 as Vec3;
                
                const array = Vec3 {
                    [0] = 1.0f, 2.0f, 3.0f
                }
            ''',                       
            code: '''         
                var a = &array[0]
                assert(a != 1 as (void*))
                assert(array[0] == 1)
                assert(array[1] == 2)
                assert(array[2] == 3)
            ''',                      
        },*/
        /*
        { 
            name: "Array Init from Typedef in struct",
            definitions: '''
                typedef [3]f32 as Vec3;
                struct X {
                    v: Vec3
                }
                
                const x = X {
                    .v = Vec3 {1,2,3}
                }
            ''',                       
            code: '''                                         
                assert(x.v[0] == 1)
                assert(x.v[1] == 2)
                assert(x.v[2] == 3)
            ''',                      
        },
        
        { 
            name: "Array Init from Typedef in func call",
            definitions: '''
                typedef [3]f32 as Vec3;
                
                func test(v: Vec3) {
                    assert(v[0] == 1f)
                    assert(v[1] == 2f)
                    assert(v[2] == 3f)    
                }
            ''',                       
            code: '''                                     
                test(Vec3{1f, 2f, 3f})
            ''',                      
        },*/
        /*
        { 
            name: "Generic Array Overload",
            definitions: '''
                //import "io"
                //import "mem"
                @include("<stdio.h>");
                @include("<stdlib.h>");
                @include("<string.h>");
                
                @foreign public func printf(s:char const*, ...) : void;
                @foreign public func malloc(size: u64) : void*;
                @foreign public func memcpy (dest: void*, src: void const*, num: u64) : void*;
                                      
                struct Array<T> {
                    elements: T*
                }             
                
                func (a: Array<T>*) add<T>(index: i32, e: T) {
                #if (isArrayType(scope.getSymbol("e")?type)) 
                
                    memcpy(&a.elements[index], e as (void*), sizeof(:T)) 
                #else
                    v.elements[index] = e 
                #end
                }
                
                func test<T>(v: T, index: i32) : f32 {
                    return v[index]
                }
            ''',                       
            code: '''       
                var v = Array<[3]f32>{}
                v.elements = malloc(sizeof(:[3]f32) * 10) as ([3](f32)*)
                
                v.add(0, [3]f32{1,2,3})
                
               // v.elements[0] = [3]f32{1,2,3}
               // v.elements[1] = [3]f32{4,5,6} 
                
              //  printf("%f", v.elements[0][1])
                
                //var a = [3]f32 {2.0f, 4.0f, 6.0f}
                //var b = [2]f32 {1.0f, 3.0f}
                
                //assert(test(b, 1) == 3.0f)
                //assert(test(a, 2) == 6.0f)                
            ''',                      
        },*/
        
        /*
        {
            name: "Body If Simple",
            definitions: '''                
                func test<T>(i: T) : T {
                    #if isBool(scope.getSymbol("i")?type)
                        return i
                    #elseif isFloat(scope.getSymbol("i")?type)
                        return i + 4.4f
                    #elseif isInteger(scope.getSymbol("i")?type)
                        return i + 4
                    #else 
                        return i
                    #end 
                }                           
            ''',            
            code: '''
                var x : i32 = test<i32>(1)
                var y : f32 = test<f32>(3.0f)
                var z : bool = test<bool>(true)
                
                assert(x == 5)
                assert(y == 7.4f)
                assert(z == true)                  
            '''
        },*/
        /*
        {
            name: "Body If MultiLine",
            definitions: '''                
                func test<T>(i: T) : T {
                    #if isBool(scope.getSymbol("i")?type) &&\
                        isInteger(scope.getSymbol("i")?type ) 
                        return i
                    #elseif isFloat(scope.getSymbol("i")?type)
                        return i + 4.4f                    
                    #else
                        return i + 6                    
                    #end 
                }                           
            ''',            
            code: '''
                var x : i32 = test<i32>(1)
                var y : f32 = test<f32>(3.0f)
                var z : bool = test<bool>(true)
                
                assert(x == 7)
                assert(y == 7.4f)
                assert(z == true)                  
            '''
        },
        */
        /*
        { 
            name: "Array Return Decay",
            definitions: '''
                typedef [3]f32 as Vec3;
                
                const array = Vec3 {
                    1.0f, 2.0f, 3.0f
                }
                
                func test(v: Vec3) : Vec3 {
                    return v
                }
            ''',                       
            code: '''         
                var a = test(array)
                assert(a[0] == 1)
                assert(a[1] == 2)
                assert(a[2] == 3)
            ''',                      
        },*/
        
        /** Do we want to support??
        { 
            name: "Array2d Return Decay",
            definitions: '''
                typedef [1][3]f32 as Vec3;
                
                const array = [1][3]f32 {
                    [3]f32 {1.0f, 2.0f, 3.0f}
                }
                
                func test(v: Vec3) : Vec3 {
                    return v // return an array, not valid/safe C
                }
            ''',                       
            code: '''         
                var a = test(array)
                assert(a[0][0] == 1)
                assert(a[0][1] == 2)
                assert(a[0][2] == 3)
            ''',                      
        },
        {
            name: "Parsing",
            definitions: '''                
                
                            
            ''',                       
            code: '''                
                test("a");
                test("b");                                          
            ''',
            error: "Unknown type 'test'"                      
        },*/
        {
            name: "Reflection",
            definitions: '''
                import "io"                
                import "type"
                            
            ''',                       
            code: '''                
                var i = typeof(i32);
                printf("TypeId: %llu\n", i)    
                var info = getTypeInfo(i)                                      
            ''',                      
        },
    ]
}