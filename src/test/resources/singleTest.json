{
    description: "Single Test",
    program: '''                
        @include("assert.h");
       // @include("<thread.h>");
        
        @foreign func assert(e:bool):void;
        
        %definitions%
        
        func main(len:i32, args:char**):i32 {
            %test%
        }
    '''
    tests: [
        /*
        {
            name: "WTF", 
            definitions: '''
                                
            ''',                       
            code: '''
                var text: [2] char;
            ''',
        },                    
        {
            name: "Fix precedence", 
            definitions: '''
                struct Test {
                }
            ''',                       
            code: '''
                const cType : Test const* = (&Test {
                }) as (Test const*);

            ''',
        },
        {
            name: "Casts",
            definitions: '''
                struct T {
                    v: i32
                }
                
                struct X<T> {
                    v: T
                }
                            
            ''',            
            code: '''
                //var i : i64 = 32 as (i64) + 45_i64
                //assert( i == 77_i64 )
                
                
                var i = 2_i64*32 as (i64) + 45_i64
                assert( i == 109_i64 )

                
                //var t = T { 4}
                //var x = X<i32> {44} as (X<i32>)
                  
            '''
        },      */       
            /*     
        {
            name: "Func Method syntax",
            definitions: '''
                struct Test {
                    field: i32
                }
                
                func (a: Test) apply() : i32 {
                    return a.field
                }
                            
            ''',            
            code: '''
                var t = Test{.field: 4}
                assert(t.apply() == 4)                 
            '''
        },
        {
            name: "Func Method syntax with ptr",
            definitions: '''
                struct Test {
                    field: i32
                }
                
                func (a: Test*) apply() : i32 {
                    return a.field
                }
                            
            ''',            
            code: '''
                var t = &Test{.field: 4}
                assert(t.apply() == 4)                 
            '''
        },*/
        {
            name: "Func Method syntax with const ptr",
            definitions: '''
                struct Test {
                    field: i32
                }
                
                func (a: Test const*) apply() : i32 {
                    return a.field
                }
                            
            ''',            
            code: '''
                var t = (&Test{.field: 4}) as (Test const*)
                assert(t.apply() == 4)                 
            '''
        },
        {
            name: "Func Method two levels deep",
            definitions: '''
                struct A {
                    
                }
                
                struct B {
                    
                }
                
                func (a: A) apply() : B {
                    return B{}
                }
                
                func (b: B) run() : i32 {
                    return 4
                }
                            
            ''',            
            code: '''
                var a = A{}
                var r = a.apply().run()
                assert(r == 4)                 
            '''
        },
        {
            name: "Func Method two levels deep Generics",
            definitions: '''
                struct A<T> {
                    a: T
                }
                
                struct B<T> {
                    b: T
                }
                
                func (a: A<T>) apply<T>() : B {
                    return B<T>{a.a}
                }
                
                func (b: B<T>) run<T>() : T {
                    return b.b
                }
                            
            ''',            
            code: '''
                var a = A<i32>{4}
                var r = a.apply<i32>().run<i32>()
                assert(r == 4)                 
            '''
        },
        {
            name: "Func Method two levels deep Generics inside Generic Func",
            definitions: '''
                struct A<T> {
                    a: T
                }
                
                struct B<T> {
                    b: T
                }
                
                func (a: A<T>) apply<T>() : B {
                    return B<T>{a.a}
                }
                
                func (b: B<T>) run<T>() : T {
                    return b.b
                }
                
                func test<T>(v: T) : T {
                    var a = A<T>{v}
                    var r = a.apply<T>().run<T>()
                    return r;
                }
                            
            ''',            
            code: '''
                var r = test<i32>(4)
                assert(r == 4)                 
            '''
        },
        {
            name: "Func Method func pointer",
            definitions: '''
                struct A {
                    fn: func() : i32
                }
                
                func test() : i32 {
                    return 4
                }
                
                            
            ''',            
            code: '''
                var a = A { &test }
                var r = a.fn()
                assert(r == 4)                 
            '''
        },
        {
            name: "Func Method func pointer shadow func ptr",
            definitions: '''
                struct A {
                    fn: func() : i32
                }
                
                func test() : i32 {
                    return 4
                }
                
                func (a: A) fn() : i32 {
                    return 32;
                }
                            
            ''',            
            code: '''
                var a = A { &test }
                var r = a.fn()
                assert(r == 4)                 
            '''
        },
        {
            name: "Func Method func pointer and method",
            definitions: '''
                struct A {
                    fn: func() : i32
                }
                
                func test() : i32 {
                    return 4
                }
                
                func (a: A) fn2() : i32 {
                    return 32;
                }
                            
            ''',            
            code: '''
                var a = A { &test }
                var r = a.fn()
                assert(r == 4) 
                r = a.fn2()
                assert(r == 32)                
            '''
        },
        {
            name: "Func Method call as func",
            definitions: '''
                struct A {
                    a: i32
                }
                
                func (a: A) fn() : i32 {
                    return a.a;
                }
                            
            ''',            
            code: '''
                var a = A { 4 }
                var r = fn(a)
                assert(r == 4) 
            '''
        },
    ]
}