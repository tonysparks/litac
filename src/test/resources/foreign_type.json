{
    description: "Foreign Type",
    disabled: false,
    includeTypeInfos: false,
    program: '''                
        @include("assert.h");
        @foreign func assert(e:bool):void;
        
        %definitions%
        
        func main(len:i32, args:char**):i32 {
            %test%
        }
    '''
    tests: [           
        {
            name: "Foreign Primitive",
            definitions: '''
                @raw("""
                int test(int x) {
                    return x;
                }
                """);
                
                @foreign                
                typedef void as int;
                
                @foreign
                func test(x: int) : int;
                
                func test2(y: int) : int {
                    return y
                }
                
                struct X {
                    x: int
                }
                
            ''',                       
            code: '''  
                var x: int = 4;
                assert(test(x) == 4);
                
                var y = x
                var z = test2(y)
                assert(z == 4)
                
                var t = X{.x = y}
                assert(t.x == 4)    
            ''',
        },        
        {
            name: "Foreign Primitive Generics",
            definitions: '''
                @raw("""
                int test(int x) {
                    return x;
                }
                """);
                
                @foreign                
                typedef void as int;
                
                @foreign
                func test(x: int) : int;
                
                func test2<T>(y: T) : T {
                    return y
                }
                
                struct X<T> {
                    x: T
                }
                
            ''',                       
            code: '''  
                var x: int = 4;
                assert(test(x) == 4);
                
                var y = x
                var z = test2(y)
                assert(z == 4)
                
                var t = X{.x = y}
                assert(t.x == 4)    
            ''',
        },
        {
            name: "Foreign Primitive Generics time_t",
            definitions: '''
                @raw("""
                typedef long long time_t;
                
                time_t test(time_t x) {
                    return x;
                }
                """);
                
                @foreign                
                typedef i64 as time_t;
                
                @foreign
                func test(x: time_t) : time_t;
                
                func test2<T>(y: T) : T {
                    return y
                }
                
                struct X<T> {
                    x: T
                }
                
            ''',                       
            code: '''  
                var x: time_t = 4;
                assert(test(x) == 4);
                
                var y = x
                var z = test2(y)
                assert(z == 4)
                
                var t = X{.x = y}
                assert(t.x == 4)    
            ''',
        },  
        {
            name: "Foreign Primitive out of order time_t",
            symbolPrefix: "litaC__",
            definitions: '''
                @raw("""
                typedef long long time_t;
                
                time_t test(time_t x) {
                    return x;
                }
                """);
                
                
                func test2(y: time_t) : time_t {
                    return y
                }
                
                struct X {
                    x: time_t
                }
                
                
                @foreign                
                typedef i64 as time_t;
                
                @foreign
                func test(x: time_t) : time_t;
                
            ''',                       
            code: '''  
                var x: time_t = 4;
                assert(test(x) == 4);
                
                var y = x
                var z = test2(y)
                assert(z == 4)
                
                var t = X{.x = y}
                assert(t.x == 4)    
            ''',
        }, 
    ]
}