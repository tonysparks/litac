{
    description: "Generics Inference",
    program: '''                
        @include("assert.h");
        @foreign func assert(e:bool):void;
        
        %definitions%
        
        func main(len:i32, args:char**):i32 {
            %test%
        }
    '''
    tests: [
        { 
            name: "Generics Type Inference",
            definitions: '''                
                func test<T>(i:T):T {
                    return i
                }
            ''',                       
            code: '''                           
                assert(test(4) == 4)
            ''',                      
        },
        
        { 
            name: "Generics Type Inference from Struct Generic Type",
            definitions: '''                
                struct Test<T> {
                    a : T
                }
                func test<T>(t:Test<T>):T {
                    return t.a
                }
            ''',                       
            code: '''         
                var t = Test<i32> { 4 }                                 
                assert(test(t) == 4)
            ''',                      
        },
        
        { 
            name: "Generics Type Inference from Struct of Struct Generic Type",
            definitions: '''                
                struct B<T> {
                    b: T
                }
                struct Test<T> {
                    a : B<T>
                }
                func test<T>(t:Test<T>):T {
                    return t.a.b
                }
            ''',                       
            code: '''         
                var t = Test<i32> { B<i32>{4} }                                 
                assert(test(t) == 4)
            ''',                      
        },
        
        
        { 
            name: "Generics Type Inference from Union Generic Type",
            definitions: '''                
                union Test<T> {
                    a : T
                }
                func test<T>(t:Test<T>):T {
                    return t.a
                }
            ''',                       
            code: '''         
                var t = Test<i32> { 4 }                                 
                assert(test(t) == 4)
            ''',                      
        },
        
        { 
            name: "Generics Type Inference from Array Generic Type",
            definitions: '''                                
                func test<T>(t: [2]T ):T {
                    return t[0]
                }
            ''',                       
            code: '''         
                var t = [2]i32 {4,5}                            
                assert(test(t) == 4)
            ''',                      
        },
        
        { 
            name: "Generics Type Inference from Ptr Generic Type",
            definitions: '''                                
                func test<T>(t: T* ):T {
                    return *t
                }
            ''',                       
            code: '''     
                var a = 4    
                var t = &a                            
                assert(test(t) == 4)
            ''',                      
        },
        
        { 
            name: "Generics Type Inference from Const Ptr Generic Type",
            definitions: '''                                
                func test<T>(t: T const* ):T {
                    return *t
                }
            ''',                       
            code: '''     
                var a = 4    
                var t = (&a) as (i32 const*)                            
                assert(test(t) == 4)
            ''',                      
        },
        
        
        { 
            name: "Generics Type Inference from Func Ptr Generic Type",
            definitions: '''                                
                func test<T>(fn: func<T>(T):T, t: T):T {
                    return fn<T>(t)
                }
                func run(t: i32) : i32 {
                    return t
                }
            ''',                       
            code: '''     
                assert(test(&run, 4) == 4)
            ''',                      
        },
    ]
}