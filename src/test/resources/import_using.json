{
    description: "Import Using",
    disabled: false,
    program: '''                
        @include("assert.h");
        @foreign func assert(e:bool):void;
        
        %definitions%
        
        func main(len:i32, args:char**):i32 {
            %test%
        }
    '''
    tests: [           
        {
            name: "Import Using",
            modules: [
                {
                    name: "impl",
                    program: '''                                                
                        public struct Test {
                            t: i32
                        }
                        
                        public func test(i: i32) : i32 {
                            return i;
                        }
                    '''
                },
                {
                    name: "test",
                    program: '''
                        import using "impl";
                    '''
                },
            ], 
            definitions: '''
                import using "test"
                
                struct Parent {
                    test: Test
                }
            ''',                       
            code: '''  
                
                
                var p = Parent{
                    .test = Test{4}
                }    
                assert(p.test.t == 4)     
                assert(test(4) == 4)       
            ''',
        },
        {
            name: "Import Using As",
            modules: [
                {
                    name: "impl",
                    program: '''                                                
                        public struct Test {
                            t: i32
                        }
                        
                        public func test(i: i32) : i32 {
                            return i;
                        }
                    '''
                },
                {
                    name: "test",
                    program: '''
                        import using "impl";
                    '''
                },
            ], 
            definitions: '''
                import "test" as z
                
                struct Parent {
                    test: z::Test
                }
            ''',                       
            code: '''  
                
                
                var p = Parent{
                    .test = z::Test{4}
                }    
                assert(p.test.t == 4)     
                assert(z::test(4) == 4)       
            ''',
        },
        {
            name: "Import Using As In Test",
            modules: [
                {
                    name: "impl",
                    program: '''                                                
                        public struct Test {
                            t: i32
                        }
                        
                        public func test(i: i32) : i32 {
                            return i;
                        }
                    '''
                },
                {
                    name: "test",
                    program: '''
                        import using "impl" as z;
                    '''
                },
            ], 
            definitions: '''
                import "test"
                
                struct Parent {
                    test: Test
                }
            ''',                       
            code: '''  
                
                
                var p = Parent{
                    .test = Test{4}
                }    
                assert(p.test.t == 4)     
                assert(test(4) == 4)       
            ''',
        },
        {
            name: "Import Using As on Parent",
            modules: [
                {
                    name: "impl",
                    program: '''                                                
                        public struct Test {
                            t: i32
                        }
                        
                        public func test(i: i32) : i32 {
                            return i;
                        }
                    '''
                },
                {
                    name: "test",
                    program: '''
                        import using "impl";
                    '''
                },
            ], 
            definitions: '''
                import using "test" as z
                
                struct Parent {
                    test: z::Test
                }
            ''',                       
            code: '''  
                
                
                var p = Parent{
                    .test = z::Test{4}
                }    
                assert(p.test.t == 4)     
                assert(z::test(4) == 4)       
            ''',
        },
        
        {
            name: "Import Using to two modules",
            modules: [
                {
                    name: "impl",
                    program: '''                                                
                        public struct Test {
                            t: i32
                        }
                        
                        public func test(i: i32) : i32 {
                            return i;
                        }
                    '''
                },
                {
                    name: "test",
                    program: '''
                        import using "impl";
                    '''
                },
                {
                    name: "test2",
                    program: '''
                        import "test";
                    '''
                },
            ], 
            definitions: '''
                import "test"
                import "test2"
                
                struct Parent {
                    test: Test
                }
            ''',                       
            code: '''  
                
                
                var p = Parent{
                    .test = Test{4}
                }    
                assert(p.test.t == 4)     
                assert(test(4) == 4)       
            ''',
        },
        
        {
            name: "Invalid Import Using",
            modules: [
                {
                    name: "impl",
                    program: '''                                                
                        public struct Test {
                            t: i32
                        }
                        
                        public func test(i: i32) : i32 {
                            return i;
                        }
                    '''
                },
                {
                    name: "test",
                    program: '''
                        import using "impl";
                    '''
                },
                {
                    name: "test2",
                    program: '''
                        import "test";
                    '''
                },
            ], 
            definitions: '''                
                import "test2"
                
                struct Parent {
                    test: Test
                }
            ''',                       
            code: '''  
                var p = Parent{
                    .test = Test{4}
                }
            ''',
            error: "Unknown type 'Test'"
        },        
    ]
}