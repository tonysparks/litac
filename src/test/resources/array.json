{
    description: "Array",
    disabled: false,
    program: '''
        import "array";
                        
        @include("assert.h");
        @foreign func assert(e:bool):void;
        
        %definitions%
        
        func main(len:i32, args:**char):i32 {
            %test%
        }
    '''
    tests: [           
        {
            name: "Array as Struct Member",
            disabled: false, 
            definitions: '''
                struct Sprite {
                    a: i32
                }
                
                struct Test {
                    sprites: Array<Sprite>
                }
            ''',                       
            code: '''
                var t = Test{}
                t.sprites.init(16)
                
                t.sprites.add(Sprite{4})
                t.sprites.add(Sprite{8})
                
                var s1 = t.sprites.get(0)
                assert(s1.a == 4)
                
                var s2 = t.sprites.get(1)
                assert(s2.a == 8)
                
                assert(t.sprites.first().a == 4)
                assert(t.sprites.last().a == 8)
                
                assert(t.sprites.size() == 2)
                t.sprites.removeAt(0)
                assert(t.sprites.size() == 1)
                var s3 = t.sprites.get(0)
                assert(s3.a == 8)
                
                assert(t.sprites.pop().a == 8)
                assert(t.sprites.length == 0)
                assert(t.sprites.size() == 0)
                assert(t.sprites.empty())
                
                const N = 256
                var sprites : [N]Sprite;
                
                for(var i = 0; i < 256; i+=1) {
                    var s = sprites[i]
                    s.a = i + 100
                    t.sprites.add(s)
                }
                
                for(var i = 0; i < t.sprites.size(); i += 1) {
                    var s = t.sprites.get(i)
                    assert(s.a == i + 100)
                }
                
                t.sprites.free()
                assert(t.sprites.length == 0)
                assert(t.sprites.capacity == 0)
                assert(t.sprites.elements == null)
            ''',
        },
        {
            name: "Array as Struct Member ptr",
            disabled: false, 
            definitions: '''
                struct Sprite {
                    a: i32
                }
                
                struct Test {
                    sprites: Array<*Sprite>
                }
            ''',                       
            code: '''
                var t = Test{}
                t.sprites.init(16)
                
                var n1 = Sprite{4}
                var n2 = Sprite{8}
                
                t.sprites.add(&n1)
                t.sprites.add(&n2)
                
                var s1 = t.sprites.get(0)
                assert(s1.a == 4)
                
                var s2 = t.sprites.get(1)
                assert(s2.a == 8)
                
                assert(t.sprites.first().a == 4)
                assert(t.sprites.last().a == 8)
                
                assert(t.sprites.size() == 2)
                t.sprites.removeAt(0)
                assert(t.sprites.size() == 1)
                var s3 = t.sprites.get(0)
                assert(s3.a == 8)
                
                assert(t.sprites.pop().a == 8)
                assert(t.sprites.length == 0)
                assert(t.sprites.size() == 0)
                assert(t.sprites.empty())
                
                const N = 256
                var sprites : [N]Sprite;
                
                for(var i = 0; i < 256; i+=1) {
                    var s = &sprites[i]
                    s.a = i + 100
                    t.sprites.add(s)
                }
                
                for(var i = 0; i < t.sprites.size(); i += 1) {
                    var s = t.sprites.get(i)
                    assert(s.a == i + 100)
                }
                
                t.sprites.free()
                assert(t.sprites.length == 0)
                assert(t.sprites.capacity == 0)
                assert(t.sprites.elements == null)
                
            ''',
        },
    ]
}