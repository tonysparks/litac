{
    description: "Arena",
    disabled: false,
    program: '''                
        @include("assert.h");
        @foreign func assert(e:bool):void;
        
        %definitions%
        
        func main(len:i32, args:**char):i32 {
            %test%
        }
    '''
    tests: [                                 
        { 
            name: "Anon Union",
            definitions: '''
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;
                         
                struct X {
                    a: i32
                }
                
                func (x: *X) method() : i32 {
                    return x.a
                }
                                                
                struct Test {
                    union {
                        w: *X
                        y: *X
                    }                                   
                }                
            ''',                       
            code: '''        
                var x = X{4}
                var t = Test {.w = &x}
                var w = t.w
                assert(w.method() == 4)
            ''',                      
        },
        { 
            name: "Arena Allocator",
            definitions: '''
                import "mem";
                import "array";
                import "io";           
                import "map";
                import "json";
                import "string_buffer"
                import "libc"
                
            ''',                       
            code: '''        
                debugAllocator.init()
                defer { 
                    debugAllocator.report(); 
                    debugAllocator.free(); 
                }
                
                var arena = Arena{}
                arena.init(4096, &debugAllocator.alloc)
                defer {
                    arena.free()                    
                    assert(debugAllocator.allocations.empty())
                }
                
                var array = Array<i32>{}
                array.init(2, &arena.alloc)
                
                const size = 1024
                for(var i = 0; i < size; i+=1) {
                    array.add(i)
                }
                
                assert(array.size() == size)
                
                var map = Map<*const char, i32>{}
                map.init(0, 1, &StrHashFn, &StrEqualFn, &arena.alloc)
                
                map.put("hi1", 421)
                map.put("hi2", 422)
                map.put("hi3", 423)
                map.put("hi4", 424)
                map.put("hi5", 425)
                
                assert(map.size() == 5)
                
                var parser = JsonParser{}
                parser.init(&arena.alloc)
                
                var node = parser.parseJson("""
                    {
                        "x" : true,
                        "y" : false,
                        "z" : [1,2,3]
                    }
                """);
                
                var buf = StringBuffer{}
                buf.init(1, &arena.alloc)
                node.print(&buf)
                
                printf("%s\n", buf.cStr())
                
            ''',                      
        },              
        { 
            name: "Arena Allocator with Default",
            definitions: '''
                import "mem";
                import "array";
                import "io";           
                import "map";
                import "json";
                import "string_buffer"
                import "libc"
                
            ''',                       
            code: '''        
                debugAllocator.init(cAllocator)
                defer { 
                    debugAllocator.report(); 
                    debugAllocator.free(); 
                }
                
                var arena = Arena{}
                arena.init(4096, &debugAllocator.alloc)
                defer {
                    arena.free()                    
                    assert(debugAllocator.allocations.empty())
                }
                
                defaultAllocator = (&arena.alloc) as (*const Allocator)
                
                var array = Array<i32>{}
                array.init(2)
                
                const size = 1024
                for(var i = 0; i < size; i+=1) {
                    array.add(i)
                }
                
                assert(array.size() == size)
                
                var map = Map<*const char, i32>{}
                map.init(0, 1, &StrHashFn, &StrEqualFn)
                
                map.put("hi1", 421)
                map.put("hi2", 422)
                map.put("hi3", 423)
                map.put("hi4", 424)
                map.put("hi5", 425)
                
                assert(map.size() == 5)
                
                var parser = JsonParser{}
                parser.init()
                
                var node = parser.parseJson("""
                    {
                        "x" : true,
                        "y" : false,
                        "z" : [1,2,3]
                    }
                """);
                
                var buf = StringBuffer{}
                buf.init(1)
                node.print(&buf)
                
                printf("%s\n", buf.cStr())
                
            ''',                      
        },                
    ]
}