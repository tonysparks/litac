import "array"
import "io"
import "mem"

func PrintElement(i: i32) : bool {
    printf("%d\n", i)
    return false
}

func main(len:i32, args:char**):i32 {
    var array =  &Array<i32>{};
    ArrayInit<i32>(array, 2);
    
    array.ArrayAdd<i32>(4)
    array.ArrayAdd<i32>(8)
    array.ArrayAdd<i32>(16)
    array.ArrayAdd<i32>(32)
    array.ArrayAdd<i32>(64)
    array.ArrayAdd<i32>(128)
    printf("Size: %d\n", array.size)
    for(var i = 0; i < array.size; i += 1) {
        printf("Index: %d value: %d (method syntax: %d)\n", i, ArrayGet<i32>(array, i), array.ArrayGet<i32>(i))
    }
    
    array.ArrayRemoveAt<i32>(1)
    
    while(!array.ArrayEmpty<i32>()) {
        printf("Pop: %d\n", array.ArrayPop<i32>())
    }
    
    
    array.ArrayPush<i32>(512)
    
    while(!array.ArrayEmpty<i32>()) {
        printf("Pop: %d\n", array.ArrayPop<i32>())
    }
    
    var array2 = &Array<i32>{};
    ArrayInit<i32>(array2, 16);
    
    for(var i = 0; i < 122; i+=1) {
        array2.ArrayAdd<i32>(i)
    }
    printf("Sizes: Array: %d,  Array2: %d\n", array.size, array2.size)
    printf("Get: %d\n", array2.ArrayGet<i32>(2))
    
    array.ArrayAddAll<i32>(array2)
    printf("After AddAll Size: %d\n", array.size)
    
    array.ArrayForeach<i32>(&PrintElement)

}