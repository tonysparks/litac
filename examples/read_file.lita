@include("stdio.h");
@include("stdlib.h");

@foreign struct FILE;
@foreign func printf(s:char*, ...) : void;
@foreign func fopen(fileName:char*, openType:char*) : FILE*;
@foreign func fgets(buf: char*, n:i32, fp: FILE*): char*;
@foreign func fclose(file:FILE*) : void;


/*
struct Vec {
	x: $T
	y: $T
}

func max(a: $T, b: $T) : $T {
	if(a > b) {
		return a
	}
	return b
}

func test(a: $T, b: $T) {
	var z : $T = max(a, b)
}

var c : max(4, 5)*/

//func mmax(a:i32, b:i32) : i32 return 43

struct X { 
 a:i32
}

struct Y {
	x: X
	b:i32
}

func main(len:i32, args:char**): i32 {
	var i : i64 = 100_000_000_000_i64
	var x : i32 = (i32)i
	var z : i64 = (i64)x
	
	var f : f64 = (f64)x
	
	var s = X { x }
	
	var p: Y = Y {
		.b: 10,
		.x: s,
		
	}
	
	var v: X* = (X*)&p;
	
	printf("v.a = %d\n", v.a)
	printf("i = %lld\n", i)
	
	var a = [2]i64
	printf("SizeOf(i64)  : %llu\n", sizeof(i64))
	printf("SizeOf(i64**): %llu\n", sizeof(i64**))
	printf("SizeOf(a)    : %llu\n", sizeof(a))
	printf("SizeOf(a[0]) : %llu\n", sizeof(a[0]))
	
   /* var fp = fopen("a_test.c", "r")
    defer fclose(fp)
    
    if(fp == null) {
        printf("File not found\n")
    }
    else {
        const len = 256
        var buf: char[len]
        
        while(true) {
            var b = fgets(buf, len, fp)
            if(b == null) {
                break;
            }
            
            printf("%s", buf)            
        }
    }*/
}