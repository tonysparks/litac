module test

// imports the file name
import strings as str

public var day = DAY.MONDAY
enum DAY {
    MONDAY  = (1<<0),
    TUESDAY = (1<<1),
}

//StructInit before StructDecl
//var z = Vec2{4, 5, X{5}}

func test(i:i32) : Vec2 {

    var i = DAY.TUESDAY
    i = DAY.MONDAY
    
    var v = Vec2{3.0,4.0,X{5.0}}
    v.x = 10
    while (true) 
        continue
    
    var s = []Vec2 {
        Vec2{1.0,2.0, X{0}}
    }
    s[0].x = s[0].X.v
    
    return v;
} 

func testPtr(i:i32**, v:Vec2*): Vec2* {
    var v = Vec2{3.0,4.0,X{5.0}}
    defer {
        v.x = 10
    }
    return &v
}

var vv = Vec2{3.0,4.0,X{5.0}}
var zz = &10
var ww = &zz
var q:Vec2* = testPtr(&zz, &vv) 
//var qq = opopo

struct Vec2 {
    x:f32
    y:f32
    
    struct X {
        v:f32
    }
}

var yy = 0
var t = 1 + 0 


//var x:i32 = 1
//var z = Vec2{4, 5}


//var f = &test(10).x

//var a = []i32 {
    //1, 2, 3
//} 

//var b = a[0] = 10
//var z = blah;





/*const x = 10;
const y = "Hello";


enum DAY {
    MONDAY = (1<<0),
    TUESDAY = (1<<1),
}

struct TestStruct {
    field1: i32 field2: f64
    field3: string
    
    struct {
        a:i32;
        b:f32;
    }
    
    union {
        struct {
            x:f32;
            y:f32;
            z:f32;
        };
        
        v: i32;
        
        
    }
}

func testFunction(x: i32, y: string) : string {
    for(var i:i32 = 0; i < 10; i+=1) {
        printf("%i", i);
    }
    
    var i:i32 = 10;
    do i+=1 while(true)
    while(i < 0) {
        if (i < 0 ) break
        i-=1
    }
    
    return "test";
}*/