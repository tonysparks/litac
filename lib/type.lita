@generated public const typeInfos: **TypeInfo = [1]*TypeInfo{0};
@generated public const numOfTypeInfos : i64 = 0;

@asStr
public enum TypeKind {
    Bool,
    Char,
    I8,  U8,
    I16, U16,
    I32, U32,
    I64, U64,
    F32, F64,
        
    Str,
    Array,
    Ptr,
    Null,
    FuncPtr,
        
    Struct,
    Func,
    Enum,
    Union,
        
    Void,
    
    MaxTypeKind
}

typedef i64 as typeid;

public enum Modifiers {
    Using = (1<<0),    
}

public struct GenericInfo {
    args: **const char
    numOfArgs: i32
}

public struct ParamInfo {
    genInfo: using GenericInfo
    name: *const char
    type: typeid
    modifiers: Modifiers
}

public struct FieldInfo {
    name: *const char
    type: typeid
    modifiers: Modifiers
}

public struct EnumFieldInfo {
    name: *const char
    value: i32
}

public struct TypeInfo {
    kind:   TypeKind;
    name:   *const char;
    id:     typeid;
    
    union {
        struct arrayType {
            length:  i32
            arrayOfType: typeid
        }
        struct ptrType {
            ptrOfType: typeid
        }
        struct funcPtrType {
            genInfo: using GenericInfo
            returnType: typeid
            params: *ParamInfo
            numOfParams: i32
        }
        struct funcType {
            genInfo: using GenericInfo
            isVararg: bool
            returnType: typeid
            params: *ParamInfo
            numOfParams: i32
        }
        struct structType {
            fields: *FieldInfo
            numOfFields: i32
        }
        struct unionType {
            fields: *FieldInfo
            numOfFields: i32
        }
        struct enumType {
            fields: *EnumFieldInfo
            numOfFields: i32
        }
    }
}

public func getTypeInfo(id: typeid) : *TypeInfo {
    if (id < 0_i64 || id >= numOfTypeInfos) {
        return null;
    }
    
    return typeInfos[id];
}