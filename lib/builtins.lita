@raw("""

#if _MSC_VER
#define THREADLOCAL __declspec(thread)
#define INLINE static inline __forceinline
#define NOINLINE __declspec(noinline)
#endif

#if __GNUC__
#define THREADLOCAL __thread
#define INLINE static inline __attribute__((always_inline))
#define NOINLINE __attribute__((noinline))
#endif

""");

public enum TypeKind {
    Bool,
    Char,
    I8,  U8,
    I16, U16,
    I32, U32,
    I64, U64,
    //    i128,u128,
    F32, F64,
        
    Str,
    Array,
    Ptr,
    Null,
    FuncPtr,
        
    Struct,
    Func,
    Enum,
    Union,
        
    Void,
}

typedef i64 as typeid;

public enum Modifiers {
    Using = (1<<0),
    Const = (1<<1),
}

public struct GenericInfo {
    args: const char**
    numOfArgs: i32
}

public struct ParamInfo {
    genInfo: using GenericInfo
    name: const char*
    type: TypeInfo*
    modifiers: Modifiers
}

public struct FieldInfo {
    name: const char*
    type: TypeInfo*
    modifiers: Modifiers
}

public struct EnumFieldInfo {
    name: const char*
    value: i32
}

public struct TypeInfo {
    kind:   TypeKind;
    name:   const char*;
    id:     typeid;
    
    union {
        struct arrayType {
            length:  i32
            arrayOfType: TypeInfo*
        }
        struct ptrType {
            ptrOfType: TypeInfo*
        }
        struct funcPtrType {
            genInfo: using GenericInfo
            returnType: TypeInfo*
            params: ParamInfo*
            numOfParams: i32
        }
        struct funcType {
            genInfo: using GenericInfo
            name: const char*
            returnType: TypeInfo*
            params: ParamInfo*
            numOfParams: i32
        }
        struct structType {
            name: const char*
            fields: FieldInfo*
            numOfFields: i32
        }
        struct unionType {
            name: const char*
            fields: FieldInfo*
            numOfFields: i32
        }
        struct enumType {
            name: const char*
            fields: EnumFieldInfo*
            numOfFields: i32
        }
    }
}

@foreign public const typeInfos: TypeInfo[];