@raw("""
#include <stdlib.h>

#if defined(_WIN32) || defined(WIN32) || defined(__CYGWIN__) || defined(__MINGW32__) || defined(__BORLANDC__)
#define OS_WIN
#endif

#if defined(OS_WIN) && !defined(__TINYC__)
#include <windows.h>
#include <libloaderapi.h>
#endif

#if defined(__TINYC__)
#include <winapi/windows.h>
#endif

#include <stdio.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>

/*
#ifndef WIN32
#include <unistd.h>
#endif
*/

#if defined(__TINYC__)
#include <sys/unistd.h>
size_t __cdecl strnlen(const char *_Str,size_t _MaxCount);
#endif

#ifdef OS_WIN
#define stat _stat
#endif

#include <errno.h>

typedef struct stat FileStat;
typedef struct tm tm;
""");

import "libc"
import "assert"
import "string"
import "string_view"

@foreign("_MAX_PATH")
public const MAX_PATH: i32;

@foreign
struct FileStat;

@foreign
struct LARGE_INTEGER {
    QuadPart: u64
}

@foreign
struct time_t;

@foreign
struct tm;

@foreign
func time(t: *time_t);

@foreign
func localtime(t: *time_t) : *tm;


@foreign
func asctime(t: *tm) : *const char;


@foreign
func stat(filename: *const char, s: *FileStat) : i32;

@foreign
func CreateDirectoryA(pathname: *const char, attr: *void) : bool;

@foreign
func GetCurrentDirectory(len: i32, buffer: *char): i32;

@foreign
func QueryPerformanceFrequency(freq: *LARGE_INTEGER) : bool;

@foreign
func QueryPerformanceCounter(time: *LARGE_INTEGER);

var systemFreq: f64;
var systemStart: u64 = 0;

@foreign
func getenv(varname: *const char) : *char;

@module_init
@no_profile
public func SystemInit() : bool {
    if(systemStart == 0) {
        var freq: LARGE_INTEGER;
        if(!QueryPerformanceFrequency(&freq)) {
            return false
        }

        systemFreq = freq.QuadPart as (f64) / 1_000.0

        var time: LARGE_INTEGER;
        QueryPerformanceCounter(&time);
        systemStart = time.QuadPart
    }

    return true
}

public func GetEnv(varName: *const char) : *char {
    return getenv(varName)
}

const pwd = [MAX_PATH]char{0};
public func CurrentWorkingPath() : *const char {
    @static var path: [MAX_PATH]char;
    if(pwd[0] == 0) {
        GetCurrentDirectory(MAX_PATH, path)
        GetAbsolutePath("", path, pwd)
    }

    return pwd;

}
public func FileExists(filename: *const char) : bool {
    var s: FileStat;
    return stat(filename, &s) == 0
}

public func Mkdir(dir: *const char) : bool {
    CreateDirectoryA(dir, null)

    var view = StringViewInit(dir)
    // we have to do this non-sense because tinycc stat doesn't like
    // trailing /
    if(view.endsWith("/")) {
        var path = [MAX_PATH]char{0}
        var normalized = StringInit(path, MAX_PATH)
        normalized.format("%.*s", view.length - 1, view.buffer)
        return FileExists(normalized.cStr())
    }
    return FileExists(dir)
}

public func FilePath(filename: *const char, out:[MAX_PATH]char) : *char {
    var index = 0

    if(!filename) {
        goto end;
    }

    var len = strlen(filename)
    if(len > 0) {
        for(index = len-1; index >= 0; index -= 1) {
            var c = filename[index]
            if(c == '/' || c == '\\') {
                memcpy(out, filename, index)
                goto end;
            }
        }
        index = 0
    }

end:
    out[index] = '\0'
    return out
}


func strcicmp(a: *const char, b: *const char) : i32 {
    if(a==b) return 0;
    if(!a && b) return -1;
    if(a && !b) return 1;

    for (;;) {
        var ac = *a
        var bc = *b

        if(!ac && bc)  return -1;
        if(ac && !bc)  return 1;
        if(!ac && !bc) return 0;

        var d = tolower(ac) - tolower(bc);
        if (d != 0) {
            return d;
        }
        a+=1
        b+=1
    }
    return 0
}

public func GetAbsolutePath(pwd: *const char, path: *const char, output: [MAX_PATH]char) : *char {
    var absStr = StringInit(output, MAX_PATH, 0);
    var pathStr = StringViewInit(path)

    if(pathStr.startsWith(".")) {
        absStr.append("%s/", pwd);
    }

    var start = path
    while(*path) {
        if(path[0] == '\\') {
            if(path[1] == '\\') {
                path += 1
            }
            absStr.appendChar('/')
        }
        else if(path[0] == '.') {
            // go up a directory
            if(path[1] == '.') {
                var len = absStr.length
                var index = len - 1
                var upCount = 0
                for(; index >= 0; index -= 1) {
                    if(absStr.buffer[index] == '/' ||
                       absStr.buffer[index] == '\\') {
                        upCount += 1
                        if(upCount > 1) {
                            break;
                        }
                    }
                }
                if(index < 0) {
                    index = 0
                }

                absStr.length = index
                if(absStr.buffer[index] == '/'||
                   absStr.buffer[index] == '\\') {
                    absStr.length = index + 1
                }
            }
            else if(path[1] == '/' || path[1] == '\\') {
                // current directory, skip both
                path += 1
            }
            else {
                absStr.appendChar('.') // part of a filename
            }
        }
        else {
            absStr.appendChar(*path)
        }
        path += 1
    }

    return absStr.cStr()
}

public func PathEquals(a: *const char, b: *const char) : bool {
    // TODO: Total BS implementation... this is downright wrong
    return strcicmp(a, b) == 0
}

const uriEscapeChars = [256]*const char {
    ['!'] = "%21",
    ['#'] = "%23",
    ['$'] = "%24",
    ['%'] = "%25",
    ['&'] = "%26",
    ['\''] = "%27",
    ['('] = "%28",
    [')'] = "%29",
    ['*'] = "%2A",
    ['+'] = "%2B",
    [','] = "%2C",
    ['/'] = "%2F",
    [':'] = "%3A",
    [';'] = "%3B",
    ['='] = "%3D",
    ['?'] = "%3F",
    ['@'] = "%40",
    ['['] = "%5B",
    [']'] = "%5D",
}

public func FilePathToUri(path: *const char, output: [MAX_PATH]char) : *char {
    var outputStr = StringInit(output, MAX_PATH, 0)
    outputStr.append("%s", "file:///")

    while(*path) {
        var escaped = uriEscapeChars[*path]
        if(escaped) {
            outputStr.append("%s", escaped)
        }
        else {
            outputStr.appendChar(*path)
        }

        path+=1
    }

    return outputStr.cStr()
}

public func UriToFilePath(uri: *const char, output: [MAX_PATH]char) : *char {
    if(strncmp(uri, "file:///", 8) == 0) {
        uri = &uri[8]
    }

    var outputStr = StringInit(output, MAX_PATH, 0)
    while(*uri) {
        if(*uri == '%') {
            var escaped = [2]char{0};
            if(uri[1] == '2') {
                if(uri[2] == '1') {
                    outputStr.appendChar('!')
                }
                else if(uri[2] == '3') {
                    outputStr.appendChar('#')
                }
                else if(uri[2] == '4') {
                    outputStr.appendChar('$')
                }
                else if(uri[2] == '5') {
                    outputStr.appendChar('%')
                }
                else if(uri[2] == '6') {
                    outputStr.appendChar('&')
                }
                else if(uri[2] == '7') {
                    outputStr.appendChar('\'')
                }
                else if(uri[2] == '8') {
                    outputStr.appendChar('(')
                }
                else if(uri[2] == '9') {
                    outputStr.appendChar(')')
                }
                else if(uri[2] == 'A') {
                    outputStr.appendChar('*')
                }
                else if(uri[2] == 'B') {
                    outputStr.appendChar('+')
                }
                else if(uri[2] == 'C') {
                    outputStr.appendChar(',')
                }
                else if(uri[2] == 'F') {
                    outputStr.appendChar('/')
                }
                else {
                    // invalid escaped sequence -- what to do here?
                    outputStr.append("%s", "%2")
                    uri += 2
                    continue
                }
            }
            else if(uri[1] == '3') {
                if(uri[2] == 'A') {
                    outputStr.appendChar(':')
                }
                else if(uri[2] == 'B') {
                    outputStr.appendChar(';')
                }
                else if(uri[2] == 'D') {
                    outputStr.appendChar('=')
                }
                else if(uri[2] == 'F') {
                    outputStr.appendChar('?')
                }
                else {
                    // invalid escaped sequence -- what to do here?
                    outputStr.append("%s", "%2")
                    uri += 2
                    continue
                }
            }
            else if(uri[1] == '4') {
                if(uri[2] == '0') {
                    outputStr.appendChar('@')
                }
                else {
                    // invalid escaped sequence -- what to do here?
                    outputStr.append("%s", "%2")
                    uri += 2
                    continue
                }
            }
            else if(uri[1] == '5') {
                if(uri[2] == 'B') {
                    outputStr.appendChar('[')
                }
                else if(uri[2] == 'D') {
                    outputStr.appendChar(']')
                }
                else {
                    // invalid escaped sequence -- what to do here?
                    outputStr.append("%s", "%2")
                    uri += 2
                    continue
                }
            }
            else {
                outputStr.appendChar(*uri)
                uri += 1
                continue
            }

            uri += 3
            continue
        }

        outputStr.appendChar(*uri)
        uri += 1
    }

    return outputStr.cStr()
}

// TODO
public func IsFile(filename: *const char) : bool {
    assert(false)
    return false
}

// TODO
public func DirectoryContents(dirname: *const char) {
    assert(false)
}

@no_profile
public func SystemTimeMSec() : f64 {
    var time: LARGE_INTEGER;
    QueryPerformanceCounter(&time);
    assert(systemFreq != 0)

    return ((time.QuadPart - systemStart) as (f64) / systemFreq) / 1_000.0;
}


public func CurrentDateTime() : *const char {
    var rawtime: time_t;
    var timeinfo: *tm;

    time(&rawtime)
    timeinfo = localtime(&rawtime)
    return asctime(timeinfo)
}

@foreign("_popen")
func popen(command: *const char, mode: *const char) : *FILE;
@foreign("_pclose")
func pclose(pipe: *FILE) : void;

public struct Process {
    pipe: *FILE
}

public func (this: *Process) readOutput(buffer: *char, length: usize) : i64 {
    if(!this.pipe) {
        return -1;
    }

    return fread(buffer, sizeof(:char), length, this.pipe)
}

public func (this: *Process) writeInput(buffer: *char, length: usize) : u64 {
    if(!this.pipe) {
        return -1;
    }

    return fwrite(buffer, sizeof(:char), length, this.pipe)
}

public func SystemExec(command: *const char) : Process {
    var pipe = popen(command, "rt")
    return Process{
        .pipe = pipe
    }
}

public func (this: *Process) close() {
    if(this.pipe) pclose(this.pipe)
}






/**
    tests
*/

@test
func testAbsolutePath() {
    var path = [MAX_PATH]char{0}
    assert(strcmp(GetAbsolutePath("C:/litac", "../src/main.lita", path), "C:/src/main.lita") == 0)
    assert(strcmp(GetAbsolutePath("C:/litac", "./../src/main.lita", path), "C:/src/main.lita") == 0)
    assert(strcmp(GetAbsolutePath("C:/litac", "./..\\src/main.lita", path), "C:/src/main.lita") == 0)
    assert(strcmp(GetAbsolutePath("C:/litac", "../../src/main.lita", path), "src/main.lita") == 0)
}